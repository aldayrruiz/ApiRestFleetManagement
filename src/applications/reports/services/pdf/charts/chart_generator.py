import datetime
import locale

import cv2

from applications.reports.services.pdf.configuration.chart_configuration import HoursChartConfiguration
from applications.reports.services.pdf.configuration.filter_by import FilterByConfiguration
from applications.reservations.models import Reservation
from applications.tenants.models import Tenant
from applications.users.models import Role
from applications.users.services.queryset import get_user_queryset
from applications.users.services.search import get_admins
from applications.vehicles.services.queryset import get_vehicles_queryset
from utils.dates import get_first_and_last_day_of, from_naive_to_aware, from_date_to_utc


class ChartGenerator:
    def __init__(self, tenant: Tenant, month: int, year: int,
                 hour_config: HoursChartConfiguration = None,
                 by: str = 'vehicle',
                 n_values: int = 25,
                 orientation: str = 'h'):
        """
        Generate a chart

        :param tenant: Tenant
        :param month: Month of the chart
        :param year: Year of the chart
        :param hour_config: If chart will be generated for a range of hours.
        :param by: If chart will be generated by vehicle or by user.
        :param n_values: Number of elements to show in the chart. If the number of elements is greater than the count,
        many charts will be generated. To get all charts generated, use get_charts().
        """
        self.tenant = tenant
        self.month = month
        self.year = year
        self.config = hour_config
        self.admin = get_admins(self.tenant).first()
        self.WORK_HOURS_PER_MONTH = 8 * 22
        self.orientation = orientation
        self.images = []

        # Filter by vehicles or user
        self.users = get_user_queryset(self.admin, even_disabled=True, even_deleted=False)\
            .filter(role__in=[Role.USER, Role.ADMIN])
        self.vehicles = get_vehicles_queryset(self.admin, even_disabled=True).order_by('date_stored')
        self.filter_by = FilterByConfiguration(self.users, self.vehicles, by)
        self.labels = self.filter_by.get_labels()

        self.n_values = n_values

        self.first_day, self.last_day = get_first_and_last_day_of(self.year, self.month)
        self.first_day, self.last_day = from_naive_to_aware(self.first_day), from_naive_to_aware(self.last_day)
        self.month_title = self.get_month_title()
        self.all_reservations = Reservation.objects.filter(vehicle__in=self.vehicles,
                                                           owner__in=self.users,
                                                           end__gt=self.first_day,
                                                           start__lt=self.last_day)

        if hour_config:
            if hour_config.ranged_hours:
                # Filtrar las reservas que han ocurrido entre las horas de la configuración.
                start = from_date_to_utc(self.year, self.month, 1, hour_config.start_hour)
                end = from_date_to_utc(self.year, self.month, 1, hour_config.end_hour)
                self.all_reservations = self.all_reservations.filter(start__time__range=(start.time(), end.time()))

            # Cambiar las horas de trabajo por las de la configuración.
            self.WORK_HOURS_PER_MONTH = hour_config.get_hours_per_month()

        self.all_reservations = self.all_reservations.order_by('start')

    def generate_images(self, filename):
        """
        Generate the images of the chart, depending on the number of values to show.
        For example, if there are 8 values and n_values is 5, 2 images will be generated.
        Images paths will be stored in self.images (an array).
        If filename is /tmp/chart, images will be /tmp/chart1.png and /tmp/chart2.png

        :param filename: /path/to/file
        :return:
        """
        i = 0
        start = 0
        end = self.n_values
        while start < len(self.labels):
            self.generate_image(filename, start, end, i)
            start += self.n_values
            end += self.n_values
            i += 1

    def generate_image(self, filename, start, end, i):
        pass

    def get_month_title(self):
        locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8')
        date = datetime.date(self.year, self.month, 1)
        return datetime.datetime.strftime(date, '%b-%Y')

    def get_xy(self, values):
        """
        Return the x (values) and y (labels) of the chart if orientation is horizontal (h).
        Otherwise, return the x (labels) and y (values) if orientation is vertical (v).

        :param values:
        :return:
        """
        if self.orientation == 'h':
            return values, self.labels
        else:
            return self.labels, values

    @staticmethod
    def remove_image_header(filename, top=80, bottom=-20):
        img = cv2.imread(f'{filename}')
        cropped = img[top:bottom, :]
        cv2.imwrite(f'{filename}', cropped)
